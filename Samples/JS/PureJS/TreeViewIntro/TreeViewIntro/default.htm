<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TreeView Introduction</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <script src="http://code.jquery.com/jquery-2.2.4.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.nav.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.odata.min.js" type="text/javascript"></script>

    <!-- add drag/drop support for mobile devices -->
    <script src="scripts/DragDropTouch.js" ></script>

    <!-- app -->
    <link rel="stylesheet" href="styles/app.css" />
    <script src="scripts/app.js" ></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" alt="Wijmo 5" />
            <h1>TreeView 101</h1>
            <p>
                This page shows how to get started with Wijmo's TreeView control.
            </p>
        </div>
    </div>
    <div class="container">

        <!-- Getting Started -->
        <div>
            <h2>Getting Started</h2>
            <p>
                Using the TreeView control is like using any Wijmo control:</p>
            <ol>
                <li>
                    Include the required scripts, either from local copies of from our CDN.
                    For details, please see 
                    <a href="http://wijmo.com/5/docs/static/references.html">Referencing Wijmo 5 in Your Applications</a>.</li>
                <li>
                    Create elements on the page that will host the controls.</li>
                <li>
                    Initialize the controls passing the id of the host element as a parameter, 
                    followed by an optional initialization object.</li>
            </ol>
            <p>
                The examples below demonstrate all this.</p>
        </div>

        <!-- Creating Trees -->
        <div>
            <h2>Creating Trees</h2>
            <p>
                To create trees, you will normally have to set three properties:</p>
            <ol>
                <li>
                    <b>itemsSource</b> defines the array that contains the hierarchical data. 
                    Each item in the array contains information about a node and (optionally) 
                    an array of child nodes.</li>
                <li>
                    <b>displayMemberPath</b> defines the name of the property in the items
                    that contains the text to be displayed in the tree nodes. By default, this
                    property is set to the string 'header'.</li>
                <li>
                    <b>childItemsPath</b> defines the name of the property in the items that
                    contains the array of child nodes. By default, this property is set to the
                    string 'items'.</li>
            </ol>
            <p>
                There are also properties for binding node images, checkboxes, and collapsed
                state to the <b>itemsSource</b> array.</p>
            <p>
                By default, the TreeView expands the first node of each level when it loads
                the tree. You can customize that behavior using the <b>collapsedMemberPath</b>
                property to control the collapsed state of each node, or call the 
                <b>collapseToLevel</b> method after the tree is loaded to collapse all nodes
                deeper than the level you want to show.
            <p>
                Once the tree is loaded, you can select, collapse, or expand nodes using the
                mouse or the keyboard. You can also use the keyboard to search for nodes.</p>
            <p>
                The TreeView control uses animations to expand and collapse nodes by default. 
                You can turn this feature off by setting the <b>isAnimated</b> property to 
                false.</p>
            <p>
                It also collapses sibling nodes automatically when a node is expanded.
                You can turn this feature off by setting the <b>autoCollapse</b> property 
                to false.</p>
            <p>
                By default, the TreeView control expands collapsed nodes when the user 
                clicks anywhere on the node. You can change this by setting the 
                <b>expandOnClick</b> property to false, in which case only clicks
                on the collapsed/expanded glyph will affect the collapsed state.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#gsCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;

  &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;

  &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="tv"&gt;&lt;/div&gt;

    &lt;button id="btnCollapse" class="btn btn-default"&gt;Collapse All&lt;/button&gt;
    &lt;button id="btnExpand" class="btn btn-default"&gt;Expand All&lt;/button&gt;

    &lt;br/&gt;
    &lt;label&gt;
        &lt;input id="chkIsAnimated" type="checkbox" checked="checked"&gt; isAnimated
    &lt;/label&gt;

    &lt;br/&gt;
    &lt;label&gt;
        &lt;input id="chkAutoCollapse" type="checkbox" checked="checked"&gt; autoCollapse
    &lt;/label&gt;
    &lt;br/&gt;
    &lt;label&gt;
        &lt;input id="chkexpandOnClick" type="checkbox" checked="checked"&gt; expandOnClick
    &lt;/label&gt;
&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
onload = function () {

    // TreeView data
    var items = [
        { header: 'Electronics', img: 'resources/electronics.png', items: [
            { header: 'Trimmers/Shavers' },
            { header: 'Tablets' },
            { header: 'Phones', img: 'resources/phones.png', items: [
                { header: 'Apple' },
                { header: 'Motorola' },
                { header: 'Nokia' },
                { header: 'Samsung' }
            ]},
            { header: 'Speakers' },
            { header: 'Monitors' }
        ]},
        { header: 'Toys', img: 'resources/toys.png', items: [
            { header: 'Shopkins' },
            ...
        ]},
        { header: 'Home', img: 'resources/home.png', items: [
            { header: 'Coffeee Maker' },
            ...
        ]}
    ];

    // create and bind the TreeView
    var tv = new wijmo.nav.TreeView('#tv', {
        displayMemberPath: 'header',
        childItemsPath: 'items',
        itemsSource: items
    });

    // handle collapse/expand buttons
    document.getElementById('btnCollapse').addEventListener('click', function () {
        tv.collapseToLevel(0);
    });
    document.getElementById('btnExpand').addEventListener('click', function () {
        tv.collapseToLevel(1000);
    });

    // handle checkboxes
    document.getElementById('chkAutoCollapse').addEventListener('change', function (e) {
        tv.autoCollapse = e.target.checked;
    });
    document.getElementById('chkIsAnimated').addEventListener('change', function (e) {
        tv.isAnimated = e.target.checked;
    });
    document.getElementById('chkExpandOnClick').addEventListener('change', function (e) {
        tv.expandOnClick = e.target.checked;
    });
}
                            </div>
                            <div class="tab-pane pane-content" id="gsCss">
/* default trees on this sample */
.wj-treeview {
    height: 350px;
    font-size: 120%;
    margin-bottom: 8px;
    background: white;
    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tv"></div>
                    <div>
                        <button id="btnCollapse" class="btn btn-default">Collapse All</button>
                        <button id="btnExpand" class="btn btn-default">Expand All</button>
                    </div>
                    <br/>
                    <label>
                        <input id="chkIsAnimated" type="checkbox" checked="checked"> isAnimated
                    </label>
                    <br/>
                    <label>
                        <input id="chkAutoCollapse" type="checkbox" checked="checked"> autoCollapse
                    </label>
                    <br/>
                    <label>
                        <input id="chkExpandOnClick" type="checkbox" checked="checked"> expandOnClick
                    </label>
                </div>
            </div>
        </div>

        <!-- Styling and CSS -->
        <div>
            <h2>Styling and CSS</h2>
            <p>
                You can customize the appearance of the TreeView using CSS.</p>
            <p>
                This example changes the collapse/expand icons, uses different
                font sizes depending on node level, and adds a vertical bar to
                the left of the level one nodes.</p>
            <p>
                Use the checkbox below the TreeView to toggle the custom style 
                and see the difference.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#stHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#stJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#stCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="stHtml">
&lt;div id="tvCss" class="custom-tree"&gt;&lt;/div&gt;
&lt;label&gt;
    Use custom CSS
    &lt;input id="tvCssCheck" type="checkbox" checked="checked"/&gt;
&lt;/label&gt;
                            </div>
                            <div class="tab-pane pane-content" id="stJs">
// create and bind the 'CSS' TreeView
var tvCss = new wijmo.nav.TreeView('#tvCss', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    itemsSource: items
});

// toggle style when user checks the checkbox
document.getElementById('tvCssCheck').addEventListener('change', function(e) {
    wijmo.toggleClass(tvCss.hostElement, 'custom-tree', e.target.checked);
});
                            </div>
                            <div class="tab-pane pane-content" id="stCss">
/* custom tree styles */
.custom-tree.wj-treeview {
    color: #80044d;
}

/* level 0 and deeper nodes */
.custom-tree.wj-treeview .wj-nodelist > .wj-node {
    font-size: 120%;
}

/* level 1 and deeper nodes (larger font, vertical line along the left) */
.custom-tree.wj-treeview .wj-nodelist > .wj-nodelist > .wj-node,
.custom-tree.wj-treeview .wj-nodelist > .wj-nodelist > .wj-nodelist {
    font-size: 110%;
    border-left: 4px solid rgba(128, 4, 77, 0.3);
}

/* level 2 and deeper nodes (smaller font, thinner border) */
.custom-tree.wj-treeview .wj-nodelist > .wj-nodelist  > .wj-nodelist > .wj-node,
.custom-tree.wj-treeview .wj-nodelist > .wj-nodelist  > .wj-nodelist > .wj-nodelist {
    font-size: 100%;
    border-left: 2px solid rgba(128, 4, 77, 0.3);
}

/* expanded node glyph */
.custom-tree.wj-treeview .wj-nodelist .wj-node:before { 
    content: "\e114";
    font-family: 'Glyphicons Halflings';
    top: 4px;
    border: none;
    opacity: .3;
    transition: all .3s cubic-bezier(.4,0,.2,1);
}

/* collapsed node glyph */
.custom-tree.wj-treeview .wj-nodelist .wj-node.wj-state-collapsed:before,
.custom-tree.wj-treeview .wj-nodelist .wj-node.wj-state-collapsing:before {
    transform: rotate(-180deg);
    transition: all .3s cubic-bezier(.4,0,.2,1);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvCss" class="custom-tree"></div>
                    <label>
                        <input id="tvCssCheck" type="checkbox" checked="checked"/>
                        Use custom CSS
                    </label>
                </div>
            </div>
        </div>

        <!-- Navigation Trees -->
        <div>
            <h2>Navigation Trees</h2>
            <p>
                The simplest and most common use for the TreeView control is navigation.
                The TreeView's hierarchical structure and auto-search functionality make
                it easy for users to drill-down and find the items they are interested in.</p>
            <p>
                You can use the <b>selectedItemChanged</b> or <b>itemClicked</b> events
                for navigation. The difference is that <b>selectedItemChanged</b> occurs
                when the user moves the selection with the keyboard, and <b>itemClicked</b>
                occurs when the user clicks an item or presses the Enter key.</p>
            <p>
                This example uses the <b>itemClicked</b> event:</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ntHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ntJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="ntHtml">
&lt;div id="tvNav"&gt;&lt;/div&gt;
&lt;div id="tvNavItem"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ntJs">
// create and bind the 'Navigation' TreeView
var tvNav = new wijmo.nav.TreeView('#tvNav', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    itemsSource: items,
    itemClicked: function (s, e) {
        document.getElementById('tvNavItem').innerHTML = 
            'Navigating to <b>*** ' + s.selectedItem.header + ' ***</b>';
    }
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvNav"></div>
                    <div id="tvNavItem"></div>
                </div>
            </div>
        </div>

        <!-- Accordion Trees -->
        <div>
            <h2>Accordion Trees</h2>
            <p>
                Accordions are multi-pane panels that keep only one panel expanded
                at a time. They are commonly used for navigation.</p>
            <p>
                You can use the TreeView control to implement accordions.</p>
            <p>
                Use CSS to customize the header display and to hide the 
                collapse/expand glyphs, and make sure the <b>autoCollapse</b>
                property is set to true (the default), so non-active panels
                are automatically collapsed.</p>
            <p>
                </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#actHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#actJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#actCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="actHtml">
&lt;div id="tvAccordion" class="accordion-tree"&gt;&lt;/div&gt;
&lt;div id="tvAccordionItem"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="actJs">
// create and bind the 'Accordion' TreeView
var tvAccordion = new wijmo.nav.TreeView('#tvAccordion', {
    isContentHtml: true,
    autoCollapse: true,
    itemsSource: [
        { header: 'Angular', items: [
            { header: '&lt;a href="ng/intro"&gt;Introduction&lt;/a&gt;' },
            { header: '&lt;a href="ng/samples"&gt;Samples&lt;/a&gt;' },
            { header: '&lt;a href="ng/perf"&gt;Performance&lt;/a&gt;' }
        ]},
        ...
    ]
});

/* handle clicks on accordion items */
tvAccordion.hostElement.addEventListener('click', function (e) {
    if (e.target.tagName == 'A') {
        document.getElementById('tvAccordionItem').innerHTML =
            'Navigating to &lt;b&gt;*** ' + e.target.href + ' ***&lt;/b&gt;';
        e.preventDefault();
    }
});
                            </div>
                            <div class="tab-pane pane-content" id="actCss">
/* accordion tree styles */
.accordion-tree.wj-treeview {
    background: transparent;
    box-shadow: none;
    height: auto;
}

/* hide collapse/expand glyphs */
.accordion-tree.wj-treeview .wj-nodelist .wj-node:before { 
    display: none;
}

/* level 0 nodes (headers) */
.accordion-tree.wj-treeview .wj-nodelist > .wj-node {
    font-size: 120%;
    font-weight: bold;
    padding: 6px 10px;
    color: white;
    background: #106cc8;
    margin-bottom: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

/* level 1 nodes (navigation items) */
.accordion-tree.wj-treeview .wj-nodelist > .wj-nodelist > .wj-node {
    font-size: inherit;
    font-weight: normal;
    padding: 4px 1em;
    color: inherit;
    background: inherit;
    box-shadow: none;
}
    .accordion-tree.wj-treeview .wj-nodelist {
        padding-bottom: 6px;
    }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvAccordion" class="accordion-tree"></div>
                    <div id="tvAccordionItem"></div>
                </div>
            </div>
        </div>

        <!-- Checkboxes -->
        <div>
            <h2>Checkboxes</h2>
            <p>
                Set the <b>showCheckboxes</b> property to true and the TreeView will 
                add checkboxes to each node.</p>
            <p>
                When checkboxes are displayed, the TreeView manages their 
                hierarchy so that when a checkbox is checked or cleared, the new
                value is automatically applied to all child nodes, and reflected
                on the state of the parent nodes.
            <p>
                When items are checked or unchecked, the <b>checkedItemsChanged</b>
                event is raised, and the <b>checkedItems</b> property is updated
                with a list of the items that are currently checked.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ncHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ncJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="ncHtml">
&lt;div id="tvChk"&gt;&lt;/div&gt;
&lt;button id="btnCheckAll" class="btn btn-default" &gt;
    Check All
&lt;/button&gt;
&lt;button id="btnUncheckAll" class="btn btn-default"&gt;
    Uncheck All
&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;
&lt;button id="btnSaveState" class="btn btn-default" &gt;
    Save State
&lt;/button&gt;
&lt;button id="btnRestoreState" class="btn btn-default"&gt;
    Restore State
&lt;/button&gt;
&lt;br/&gt;
&lt;div id="tvChkStatus"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ncJs">
// create and bind the 'Checkboxes' TreeView
var tvChk = new wijmo.nav.TreeView('#tvChk', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    showCheckboxes: true,
    itemsSource: items,
    checkedItemsChanged: function (s, e) {
        var items = s.checkedItems,
            msg = '';
        if (items.length) {
            msg = '&lt;p&gt;&lt;b&gt;Checked Items:&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;\r\n';
            for (var i = 0; i &lt; items.length; i++) {
                msg += '&lt;li&gt;' + items[i].header + '&lt;/li&gt;\r\n';
            }
            msg += '&lt;/ol&gt;';
        }
        document.getElementById('tvChkStatus').innerHTML = msg;
    }
});

// check/uncheck all nodes
document.getElementById('btnCheckAll').addEventListener('click', function () {
    tvChk.checkAllItems(true);
});
document.getElementById('btnUncheckAll').addEventListener('click', function () {
    tvChk.checkAllItems(false);
});

// save/restore checked state
var saveCheckedItems = null;
document.getElementById('btnSaveState').addEventListener('click', function () {
    saveCheckedItems = tvChk.checkedItems;
});
document.getElementById('btnRestoreState').addEventListener('click', function () {
    tvChk.checkedItems = saveCheckedItems || [];
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvChk"></div>
                    <button id="btnCheckAll" class="btn btn-default" >
                        Check All
                    </button>
                    <button id="btnUncheckAll" class="btn btn-default">
                        Uncheck All
                    </button>
                    &nbsp;&nbsp;&nbsp;&nbsp;
                    <button id="btnSaveState" class="btn btn-default" >
                        Save State
                    </button>
                    <button id="btnRestoreState" class="btn btn-default">
                        Restore State
                    </button>
                    <br/>
                    <div id="tvChkStatus"></div>
                </div>
            </div>
        </div>

        <!-- Images -->
        <div>
            <h2>Images</h2>
            <p>
                Use the <b>imageMemberPath</b> property to add images to nodes by specifying the
                name of a property on the data items that contains an image URL.</p>
            <p>
                For example, some our sample <b>items</b> array have an "img" property set to
                image URLs:
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#niHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#niJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="niHtml">
&lt;div id="tvImg"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="niJs">
// create and bind the 'Images' TreeView
var tvImg = new wijmo.nav.TreeView('#tvImg', {
    displayMemberPath: 'header',
    imageMemberPath: 'img',
    childItemsPath: 'items',
    itemsSource: items
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvImg"></div>
                </div>
            </div>
        </div>

        <!-- Disabled Nodes -->
        <div>
            <h2>Disabled Nodes</h2>
            <p>
                You can disable nodes using the TreeNode's <b>isDisabled</b> property.
                Disabled nodes cannot be selected using the mouse or keyboard.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#dnHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#dnJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="dnHtml">
&lt;div id="tvDisable"&gt;&lt;/div&gt;
&lt;button id="btnDisableNode" class="btn btn-default"&gt;Disable Selected Node&lt;/button&gt;
&lt;button id="btnEnableAllNodes" class="btn btn-default"&gt;Enable All Nodes&lt;/button&gt;
                            </div>
                            <div class="tab-pane pane-content" id="dnJs">
// create and bind the 'Disable Items' TreeView
var tvDisable = new wijmo.nav.TreeView('#tvDisable', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    itemsSource: items,
});

// disable selected node
document.getElementById('btnDisableNode').addEventListener('click', function () {
    var nd = tvDisable.selectedNode;
    if (nd) {
        nd.isDisabled = true;
    }
});

// enable all nodes
document.getElementById('btnEnableAllNodes').addEventListener('click', function () {
    for (var nd = tvDisable.getFirstNode(); nd; nd = nd.next()) {
        nd.isDisabled = false;
    }
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvDisable"></div>
                    <button id="btnDisableNode" class="btn btn-default">Disable Selected Node</button>
                    <button id="btnEnableAllNodes" class="btn btn-default">Enable All Nodes</button>
                </div>
            </div>
        </div>

        <!-- Custom Node Content -->
        <div>
            <h2>Custom Node Content</h2>
            <p>
                You can customize the content of the TreeView nodes using the <b>formatItem</b> 
                event. The event handler parameters include the element that represents the node
                and the data item being rendered.</p>
            <p>
                The example below uses the <b>formatItem</b> event to add a "new" badge to the
                right of new items on the tree.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#fiHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#fiJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="fiHtml">
&lt;div id="tvFmtItem"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="fiJs">
// create and bind the 'Custom Content' TreeView
var tvFmtItem = new wijmo.nav.TreeView('#tvFmtItem', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    itemsSource: items,
    formatItem: function (s, e) {
        if (e.dataItem.newItem) {
            e.element.innerHTML += 
                '&lt;img style="margin-left:6px" src="resources/new.png"/&gt;';
        }
    }
});
                        </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvFmtItem"></div>
                </div>
            </div>
        </div>

        <!-- Lazy Loading -->
        <div>
            <h2>Lazy Loading</h2>
            <p>
                Lazy loading is useful when you are dealing with large hierarchical data sources
                and would like to avoid the delays involved in loading the entire data set at once.</p>
            <p>
                The TreeView control makes lazy-loading super easy. Only two steps are required:</p>
            <ol>
                <li>
                    Set the <b>items</b> property in the parent node data item to an empty array.</li>
                <li>
                    Set the TreeView's <b>lazyLoadFunction</b> property to a function to be called
                    when the user expands the node. This function takes two parameters: the parent node
                    and a callback function to be invoked when the data becomes available.</li>
            </ol>
            <p>
                The tree in example below starts with three lazy-loaded nodes.
                When you expand them, the <b>lazyLoadFunction</b> is invoked. The function
                uses a setTimeout to simulate an http delay and returns data for three child nodes, 
                one of which is also a lazy-loaded node.</p>
            <p>
                The example also uses some CSS to animate the node icons while they are being 
                loaded.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#llHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#llJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="llHtml">
&lt;div id="tvLazyLoad"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="llJs">
// create and bind the 'Lazy Load' TreeView
var tvLazyLoad = new wijmo.nav.TreeView('#tvLazyLoad', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    itemsSource: [ // start with three lazy-loaded nodes
        { header: 'Lazy Node 1', items: []},
        { header: 'Lazy Node 2', items: [] },
        { header: 'Lazy Node 3', items: [] }
    ],
    lazyLoadFunction: function (node, callback) {
        setTimeout(function () { // simulate http delay
            var result = [ // simulate result
                { header: 'Another lazy node...', items: [] },
                { header: 'A non-lazy node without children' },
                { header: 'A non-lazy node with child nodes', items: [
                    { header: 'hello' },
                    { header: 'world' }
                ]}
            ];
            callback(result); // return result to control
        }, 2500); // 2.5sec http delay
    }
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvLazyLoad"></div>
                </div>
            </div>
        </div>

        <!-- Lazy Loading and OData -->
        <div>
            <h2>Lazy Loading and OData</h2>
            <p>
                This example shows how you can use the TreeView control to display
                hierarchical data from OData sources.</p>
            <p>
                The sample starts by loading the Northwind employees table. When the 
                data is loaded, the code adds an "Orders" empty array to each employee. 
                The <b>lazyLoadFunction</b> is used to load the orders when an employee
                node is expanded.</p>
            <p>
                The orders table also adds an "Order_Details" empty array to each 
                order. The <b>lazyLoadFunction</b> is used to load the order details
                when an order node is expanded.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#lloHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#lloJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#lloCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="lloHtml">
&lt;div id="tvLazyLoadOData"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="lloJs">
// demonstrate lazy-loading with OData
var nwindService = 'http://services.odata.org/V4/Northwind/Northwind.svc';
var tvLazyLoadOData = new wijmo.nav.TreeView('#tvLazyLoadOData', {
    displayMemberPath: ['FullName', 'ShipName', 'Summary' ],
    childItemsPath: ['Orders', 'Order_Details'],
    lazyLoadFunction: function (node, callback) {

        switch (node.level) {

            // load orders for an employee
            case 0:
                var url = 'Employees(' + node.dataItem.EmployeeID + ')/Orders';
                var orders = new wijmo.odata.ODataCollectionView(nwindService, url, {
                    fields: 'OrderID,ShipName,ShipCountry'.split(','),
                    loaded: function () {
                        var items = orders.items.map(function (e) {
                            e.Order_Details = []; // lazy-order details
                            return e;
                        });
                        callback(items);
                    }
                });
                break;

            // load extended details for an order
            case 1:
                var url = "Order_Details_Extendeds/?$filter=OrderID eq " + node.dataItem.OrderID;
                var details = new wijmo.odata.ODataCollectionView(nwindService, url, {
                    fields: 'ProductName,ExtendedPrice'.split(','),
                    loaded: function () {
                        var items = details.items.map(function (e) {
                            e.Summary = wijmo.format('{ProductName}: {ExtendedPrice:c}', e);
                            return e;
                        });
                        callback(items);
                    }
                });
                break;

            // default
            default:
                callback(null);
        }
    }
});

// first level: employees
var employees = new wijmo.odata.ODataCollectionView(nwindService, 'Employees', {
    fields: 'EmployeeID,FirstName,LastName'.split(','),
    loaded: function () {
        var items = employees.items.map(function (e) {
            e.FullName = e.FirstName + ' ' + e.LastName;
            e.Orders = []; // lazy-load orders
            return e;
        });
        tvLazyLoadOData.itemsSource = items;
    }
});
                            </div>
                            <div class="tab-pane pane-content" id="lloCss">
/* level 0 nodes and deeper (employees...) */
#tvLazyLoadOData.wj-treeview .wj-nodelist > .wj-node {
    font-weight: bold;
}

/* level 1 nodes and deeper (orders...) */
#tvLazyLoadOData.wj-treeview .wj-nodelist > .wj-nodelist > .wj-node {
    font-weight: normal;
    font-size: 95%;
    color: darkblue;
}

/* level 2 nodes and deeper (order details...) */
#tvLazyLoadOData.wj-treeview .wj-nodelist > .wj-nodelist > .wj-nodelist > .wj-node {
    font-size: 90%;
    color: darkslategrey;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvLazyLoadOData"></div>
                </div>
            </div>
        </div>

        <!-- Drag and Drop -->
        <div>
            <h2>Drag and Drop</h2>
            <p>
                Set the <b>allowDragging</b> property to true to allow users to drag nodes to new
                positions within the TreeView.</p>
            <p>
                When dragging is allowed, users may drag any node to any position within the tree.
                You can customize this behavior by handling the TreeView drag/drop events:</p>
            <ul>
                <li>
                    <b>dragStart:</b> Occurs when a drag/drop operation is about to start. You 
                    may examine the node about to be dragged and cancel the operation by
                    setting the event's <b>cancel</b> parameter to true.</li>
                <li>
                    <b>dragOver:</b> Occurs while the user drags the node over other nodes on 
                    the tree. You may examine the current target node and drop position and
                    prevent the drop or modify its location setting the event's <b>cancel</b> 
                    and <b>position</b> parameters.</li>
                <li>
                    <b>drop:</b> Occurs when the user drops the node into its new location.
                    You may examine the current target node and drop position and
                    prevent the drop or modify its location setting the event's <b>cancel</b> 
                    and <b>position</b> parameters.</li>
                <li>
                    <b>dragEnd:</b> Occurs after the drag/drop operation is finished, even if
                    it was canceled and the source node was not moved.</li>
            </ul>
            <p>
                The example below shows how to provide standard and customized drag/drop 
                operations on a TreeView control:</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ddHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ddJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="ddHtml">
&lt;div id="tvDragDrop"&gt;&lt;/div&gt;
&lt;label&gt;
    &lt;input id="allowDragging" type="checkbox" checked="checked"&gt; allowDragging
&lt;/label&gt;
&lt;br/&gt;
&lt;label&gt;
    &lt;input id="allowDraggingParentNodes" type="checkbox" checked="checked"&gt; allow dragging parent nodes
&lt;/label&gt;
&lt;br/&gt;
&lt;label&gt;
    &lt;input id="allowDroppingIntoEmpty" type="checkbox" checked="checked"&gt; allow dropping into empty nodes
&lt;/label&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ddJs">
// create and bind the drag/drop TreeView
var allowDraggingParentNodes = true,
    allowDroppingIntoEmpty = true;
var tvDragDrop = new wijmo.nav.TreeView('#tvDragDrop', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    imageMemberPath: 'img',
    showCheckboxes: true,
    allowDragging: true,
    itemsSource: items,

    // use dragStart event to honor the allowDraggingParentNodes setting
    // by setting the 'cancel' event parameter to true
    dragStart: function (s, e) {
        if (e.node.hasChildren) {
            if (!allowDraggingParentNodes) {
                e.cancel = true; // prevent dragging parent nodes
            } else {
                e.node.isCollapsed = true; // collapse parent nodes when dragging
            }
        }
    },

    // use dragOver event to honor the allowDroppingIntoEmpty setting
    // by changing the 'position' event parameter to 'Before'
    dragOver: function (s, e) {
        if (!allowDroppingIntoEmpty &&
            !e.dropTarget.hasChildren &&
                e.position == wijmo.input.DropPosition.Into) {
            e.position = wijmo.input.DropPosition.Before;
        }
    },
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvDragDrop"></div>
                    <label>
                        <input id="allowDragging" type="checkbox" checked="checked"> allowDragging
                    </label>
                    <br/>
                    <label>
                        <input id="allowDraggingParentNodes" type="checkbox" checked="checked"> allow dragging parent nodes
                    </label>
                    <br/>
                    <label>
                        <input id="allowDroppingIntoEmpty" type="checkbox" checked="checked"> allow dropping into empty nodes
                    </label>
                </div>
            </div>
        </div>

        <!-- Drag and Drop Between Trees-->
        <div>
            <h2>Drag and Drop Between Trees</h2>
            <p>
                Setting the <b>allowDragging</b> property to true allows users to drag and drop nodes
                within the same TreeView.</p>
            <p>
                To allow dragging and dropping nodes between different TreeView controls, you must
                handle the <b>dragOver</b> event and set the <b>cancel</b> parameter to false if
                the move is valid.</p>
            <p>
                In the example below, users can drag nodes within and between the two trees:</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#ddbHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#ddbJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="ddbHtml">
&lt;div class="short" id="tvDragDrop1"&gt;&lt;/div&gt;
&lt;div class="short" id="tvDragDrop2"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="ddbJs">
// create trees to drag/drop between
var tvDragDrop1 = new wijmo.nav.TreeView('#tvDragDrop1', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    allowDragging: true,
    dragOver: dragOverBetweenTrees,
    itemsSource: [
        { header: 'Item 1.1' },
        { header: 'Item 1.2' },
        { header: 'Item 1.3' },
    ]
});
var tvDragDrop2 = new wijmo.nav.TreeView('#tvDragDrop2', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    allowDragging: true,
    dragOver: dragOverBetweenTrees,
    itemsSource: [
        { header: 'Item 2.1' },
        { header: 'Item 2.2' },
        { header: 'Item 2.3' },
    ]
});

// allow drag/drop between tvDragDrop1 and tvDragDrop2
function dragOverBetweenTrees(s, e) {
    var t1 = e.dragSource.treeView,
        t2 = e.dropTarget.treeView;
    if (t1 == tvDragDrop1 || t1 == tvDragDrop2) {
        if (t2 == tvDragDrop1 || t2 == tvDragDrop2) {
            e.cancel = false;
        }
    }
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="short" id="tvDragDrop1"></div>
                    <div class="short" id="tvDragDrop2"></div>
                </div>
            </div>
        </div>

        <!-- Editing Nodes -->
        <div>
            <h2>Editing Nodes</h2>
            <p>
                The TreeView control provides editing support. Set the <b>isReadOnly</b> 
                property to false and users will be able to edit the content of the nodes 
                by pressing the F2 key.</p>
            <p>
                Edits made to node contents are automatically applied to the items in 
                the <b>itemsSource</b> array using the properties specified by the
                <b>displayMemberPath</b> property.</p>
            <p>
                You may customize the editing behavior using the following events:
                <b>nodeEditStarting</b>, <b>nodeEditStarted</b>, 
                <b>nodeEditEnding</b>, and <b>nodeEditEnded</b>.</p>
            <p>
                In the example below, we enable editing only for nodes that contain no 
                children. To edit, select a node and press F2:
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#edtHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#edtJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="edtHtml">
&lt;div id="tvEdit"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="edtJs">
// create and bind the 'Editable Nodes' TreeView
var tvEdit = new wijmo.nav.TreeView('#tvEdit', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    imageMemberPath: 'img',
    showCheckboxes: true,
    itemsSource: items,
    isReadOnly: false,
    nodeEditStarting: function (s, e) {
        if (e.node.hasChildren) {
            e.cancel = true;
        }
    }
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div>
                        <div id="tvEdit"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- RTL -->
        <div>
            <h2>RTL support</h2>
            <p>
                Some languages render content from the right to the left of the page 
                (Arabic and Hebrew are typical examples) .
                HTML accommodates this with the 'dir' attribute. Setting 'dir' to 'rtl' 
                on any element causes the element's content to flow from right to left.</p>
            <p>
                The TreeView supports this automatically. If the element hosting the tree 
                has the 'dir' attribute set to 'rtl', the tree will render with nodes 
                extending from right to left. You don't have to set any properties on the 
                control.</p>
            <p>
                Note that the 'dir' attribute value is inherited, so if you set it on the 
                body tag for example, the entire page will be rendered from right to left,
                including the tree.</p>
            <p>
                Note also that CSS has a 'direction' attribute that performs the same 
                function as the 'dir' element attribute. The 'dir' attribute is generally 
                considered more appropriate for several reasons, including the fact that 
                it can be used in CSS rules.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#rtlHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#rtlJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="rtlHtml">
&lt;div dir="rtl"&gt;
    &lt;p&gt;My parent element has a &lt;b&gt;dir="rtl"&lt;/b&gt; attribute!&lt;/p&gt;
    &lt;div id="tvRtl"&gt;&lt;/div&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="rtlJs">
// demonstrate RTL support (no need to set any properties)
var tvRtl = new wijmo.nav.TreeView('#tvRtl', {
    displayMemberPath: 'header',
    childItemsPath: 'items',
    imageMemberPath: 'img',
    showCheckboxes: true,
    allowDragging: true,
    itemsSource: items
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div dir="rtl">
                        <p>My parent element has a <b>dir="rtl"</b> attribute!</p>
                        <div id="tvRtl"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="http://cdn.wijmo.com/wijmo.sample.toolbar.js" type="text/javascript"></script>
</body>
</html>
